// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"go-clean-arch/internal/config"
	"go-clean-arch/internal/delivery/http/controller"
	"go-clean-arch/internal/delivery/http/middleware"
	"go-clean-arch/internal/delivery/http/route"
	"go-clean-arch/internal/repository"
	"go-clean-arch/internal/usecase"
)

// Injectors from injector.go:

func InitializeServer() *gin.Engine {
	viper := config.NewViper()
	logger := config.NewLogger(viper)
	db := config.NewDatabase(viper, logger)
	userRepository := repository.NewUserRepository(logger)
	jwtWrapper := config.NewJwtWrapper(viper)
	validate := config.NewValidator(viper)
	userUseCase := usecase.NewUserUseCase(db, logger, userRepository, jwtWrapper, validate)
	authMiddleware := middleware.NewAuthMiddleware(userUseCase)
	authController := controller.NewAuthController(userUseCase, logger)
	userController := controller.NewUserController(userUseCase, logger)
	configRoute := route.NewRoute(authMiddleware, authController, userController)
	engine := config.NewApp(configRoute)
	return engine
}

// injector.go:

var configSet = wire.NewSet(config.NewViper, config.NewLogger, config.NewDatabase, config.NewValidator, config.NewJwtWrapper)

var repositorySet = wire.NewSet(repository.NewUserRepository)

var useCaseSet = wire.NewSet(usecase.NewUserUseCase)

var controllerSet = wire.NewSet(controller.NewAuthController, controller.NewUserController)

var middlewareSet = wire.NewSet(middleware.NewAuthMiddleware)
